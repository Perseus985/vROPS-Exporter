## GitLab Runner Image
##
image:
  registry: i0000007-image-scanned.artifacts.konvoi.svc.intdev.cloud.bwi.intranet-bw.de
  image: registry.gitlab.com/gitlab-org/gitlab-runner
  tag: v17.6.0

## Specify a imagePullPolicy for the main runner deployment
## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
##
## Note: it does not apply to job containers launched by this executor.
## Use `pull_policy` in [runners.kubernetes] to change it.
##
## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
##
imagePullPolicy: IfNotPresent

## Specifying ImagePullSecrets on a Pod
## Kubernetes supports specifying container image registry keys on a Pod.
## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
##
imagePullSecrets:
  - name: "pullsecret-ociregistry-scanned"

## The GitLab Server URL (with protocol) that want to register the runner against
## ref: https://docs.gitlab.com/runner/commands/index.html#gitlab-runner-register
##
gitlabUrl: https://provgitlab.sgw.cloud.bwi.intranet-bw.de/

## Unregister all runners before termination
##
## Updating the runner's chart version or configuration will cause the runner container
## to be terminated and created again. This may cause your Gitlab instance to reference
## non-existent runners. Un-registering the runner before termination mitigates this issue.
## ref: https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-unregister
##
unregisterRunners: true

## When stopping the runner, give it time to wait for its jobs to terminate.
##
## Updating the runner's chart version or configuration will cause the runner container
## to be terminated with a graceful stop request. terminationGracePeriodSeconds
## instructs Kubernetes to wait long enough for the runner pod to terminate gracefully.
## ref: https://docs.gitlab.com/runner/commands/#signals
terminationGracePeriodSeconds: 3600

## Set the certsSecretName in order to pass custom certficates for GitLab Runner to use
## Provide resource name for a Kubernetes Secret Object in the same namespace,
## this is used to populate the /home/gitlab-runner/.gitlab-runner/certs/ directory
## ref: https://docs.gitlab.com/runner/configuration/tls-self-signed.html#supported-options-for-self-signed-certificates-targeting-the-gitlab-server
##
# Even if we add the trustcenter certs and it runs into the pod fine the dedicated cert is needed.
# See UFD, konvoi-ops, gitlab-runner
certsSecretName: pkibw-cachain

## Configure the maximum number of concurrent jobs
## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section
##
concurrent: 10

## Defines in seconds how often to check GitLab for a new builds
## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section
##
checkInterval: 3

## Resources
resources:
  requests:
    cpu: 100m
    memory: 200M
  limits:
    memory: 200M

## Configuration for the Pods that the runner launches for each new job
##
runners:
  secret: provider-gitlab-runner-token
  # runner configuration, where the multi line strings is evaluated as
  # template so you can specify helm values inside of it.
  #
  # tpl: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  # runner configuration: https://docs.gitlab.com/runner/configuration/advanced-configuration.html
  config: |
    [[runners]]
      name = "ORCA-Runner"
      clone_url = "https://provgitlab.sgw.cloud.bwi.intranet-bw.de/"
      executor = "kubernetes"
      tls-ca-file = "/home/gitlab-runner/.gitlab-runner/certs/provgitlab.sgw.cloud.bwi.intranet-bw.de.crt"
      [runners.kubernetes]
        namespace = "{{ .Release.Namespace }}"
        # image = "i0000007-image-scanned.artifacts.konvoi.svc.intdev.cloud.bwi.intranet-bw.de/registry.gitlab.com/gitlab-org/gitlab-runner:v17.6.0"
        image = "service-image-scanned.artifacts.konvoi.svc.intdev.cloud.bwi.intranet-bw.de/registry-1.docker.io/gitlab/gitlab-runner:alpine-v16.10.0"
        helper_image = "i0000007-image-scanned.artifacts.konvoi.svc.intdev.cloud.bwi.intranet-bw.de/registry.gitlab.com/gitlab-org/gitlab-runner-helper:x86_64-v17.6.0"
        image_pull_secrets = ["pullsecret-ociregistry-scanned"]
        allowed_pull_policies = ["always", "if-not-present"]
        helper_cpu_limit = ""
        helper_cpu_request = "100m"
        helper_memory_limit = "4Gi"
        helper_memory_limit_overwrite_max_allowed = "8Gi"
        helper_memory_request = "128Mi"
        helper_memory_request_overwrite_max_allowed = "8Gi"
        helper_ephemeral_storage_request = "2Gi"
        helper_ephemeral_storage_request_overwrite_max_allowed = "50Gi"
        helper_ephemeral_storage_limit  = "5Gi"
        helper_ephemeral_storage_limit_overwrite_max_allowed = "50Gi"
        service_memory_request = "64Mi"
        service_memory_limit = "4Gi"
        service_cpu_limit = ""
        service_cpu_request = "50m"
        service_ephemeral_storage_request = "2Gi"
        service_ephemeral_storage_limit  = "5Gi"
        cpu_limit = ""
        cpu_request = "500m"
        memory_limit = "16Gi"
        memory_limit_overwrite_max_allowed = "64Gi"
        memory_request = "256Mi"
        memory_request_overwrite_max_allowed = "64Gi"
        ephemeral_storage_request = "15Gi"
        ephemeral_storage_request_overwrite_max_allowed = "64Gi"
        ephemeral_storage_limit  = "15Gi"
        ephemeral_storage_limit_overwrite_max_allowed  = "64Gi"
        pull_policy = ["always", "always"]

        [[runners.kubernetes.volumes.config_map]]
          name = "pkibw-ca-certs"
          mount_path = "/etc/gitlab-runner/certs/"

        [runners.kubernetes.pod_annotations]
          "container.apparmor.security.beta.kubernetes.io/build" = "unconfined"
          "container.seccomp.security.alpha.kubernetes.io/build" = "unconfined"

        [runners.kubernetes.pod_labels]
          "app.kubernetes.io/name" = "gitlab-runner"
          "job_id" = "${CI_JOB_ID}"
          "job_name" = "${CI_JOB_NAME}"
          "pipeline_id" = "${CI_PIPELINE_IID}"
          "project" = "${CI_PROJECT_PATH}"

        [runners.kubernetes.affinity]
          [runners.kubernetes.affinity.pod_anti_affinity]
            [[runners.kubernetes.affinity.pod_anti_affinity.preferred_during_scheduling_ignored_during_execution]]
            weight = 100
            [runners.kubernetes.affinity.pod_anti_affinity.preferred_during_scheduling_ignored_during_execution.pod_affinity_term]
              topology_key = "kubernetes.io/hostname"
              [runners.kubernetes.affinity.pod_anti_affinity.preferred_during_scheduling_ignored_during_execution.pod_affinity_term.label_selector]
                [[runners.kubernetes.affinity.pod_anti_affinity.preferred_during_scheduling_ignored_during_execution.pod_affinity_term.label_selector.match_expressions]]
                  key = "app.kubernetes.io/name"
                  operator = "In"
                  values = ["gitlab-runner"]
  ## Specify the tags associated with the runner. Comma-separated list of tags.
  ##
  ## ref: https://docs.gitlab.com/ee/ci/runners/configure_runners.html#use-tags-to-control-which-jobs-a-runner-can-run
  ##
  # tags: "konvoi-mgmt"

  ## Specify if jobs without tags should be run.
  ## If not specified, Runner will default to true if no tags were specified. In other case it will
  ## default to false.
  ##
  ## ref: https://docs.gitlab.com/ee/ci/runners/configure_runners.html#set-a-runner-to-run-untagged-jobs
  ##
  # runUntagged: false

  ## Run all containers with the privileged flag enabled
  ## This will allow the docker:dind image to run if you need to run Docker
  ## commands. Please read the docs before turning this on:
  ## ref: https://docs.gitlab.com/runner/executors/kubernetes.html#using-docker-dind
  ##
  privileged: false

## For RBAC support:
rbac:
  create: true

  ## Run the gitlab-bastion container with the ability to deploy/manage containers of jobs
  ## cluster-wide or only within namespace
  clusterWideAccess: false

  ## Use the following Kubernetes Service Account name if RBAC is disabled in this Helm chart (see rbac.create)
  ##
  # serviceAccountName: default

  ## Specify one or more imagePullSecrets used for pulling the runner image
  ##
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
  ##
  # imagePullSecrets:
  #   - "regcred"

## Configure environment variables that will be present when the registration command runs
## This provides further control over the registration process and the config.toml file
## ref: `gitlab-runner register --help`
## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html
##
envVars:
  - name: RUNNER_EXECUTOR
    value: kubernetes

securityContext:
  runAsUser: 999
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  privileged: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault
podSecurityContext:
  runAsUser: 999
  fsGroup: 65533
